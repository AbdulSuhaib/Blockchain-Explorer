
@using System.Threading.Tasks
@using Core
@model BitcoinChainExplorerForAspNet5.Models.TransactionViewModel
@{
    var divclass = Model.Transaction.AssetData.Any() ? "colortr" : "";
}



<div class="container">
    <header class="top-nav-links clearfix">
        <h1>Transaction</h1>
        <div class="tr-h-top">@Model.Transaction.TxId</div>
    </header>

    <div class="page-content">
        <div class="transaction-explorer">
            <div class="row">
                <div class="col-md-7">
                    <div class="title-bl">Advanced details</div>
                    <table class="table table-rounded ">
                        <tbody>
                        <tr>
                            <td class="no-wrap">Hash</td>
                            <td class="expand-column">@Model.Transaction.TxId</td>
                        </tr>
                        <tr>
                            <td class="no-wrap">Date</td>
                            <td class="expand-column">@($"{Model.Transaction.Block.Time:F}")</td>
                        </tr>
                        <tr>
                            <td class="no-wrap">Fee paid</td>
                            <td class="expand-column">@BitcoinUtils.SatoshiToBtc(Model.Transaction.Fees) BTC</td>
                        </tr>
                        <tr>
                            <td class="no-wrap">Assets transacted</td>
                            <td class="expand-column">
                                @if (!Model.Transaction.AssetData.Any())
                                {
                                    <span>None</span>
                                }
                                else
                                {
                                    @Model.Transaction.AssetData.Count()
                                }
                            </td>
                        </tr>
                        </tbody>
                    </table>
                </div>
                <div class="col-md-5">
                    <div class="title-bl">Transaction confirmed</div>
                    <table class="table table-rounded ">
                        <tbody>
                            <tr>
                                <td class="no-wrap">Confirmations</td>
                                <td class="expand-column">@Model.Transaction.Block.Confirmations confirmations</td>
                            </tr>
                            <tr>
                                <td class="no-wrap">Time</td>
                                <td class="expand-column">@($"{Model.Transaction.Block.Time:F}")</td>
                            </tr>
                            <tr>
                                <td class="no-wrap">Block</td>
                                <td class="expand-column"><a asp-controller="Block" asp-action="Index" asp-route-id="@Model.Transaction.Block.Hash">@Model.Transaction.Block.Hash</a></td>
                            </tr>
                            <tr>
                                <td class="no-wrap">Height</td>
                                <td class="expand-column">@Model.Transaction.Block.Height</td>
                            </tr>
                        </tbody>
                    </table>
                </div>
            </div>
            <div class="panel panel-default transaction-details tr-de-inner detal-tr-inner @divclass">
                <div class="panel-heading">
                    <h3 class="panel-title">Bitcoin</h3>
                </div>

                <ul class="list-group">

                    <li class="list-group-item clearfix intput-output-group-list-item">

                        <div class="intput-output-group">
                            <div class="icon dspl-icon">
                                <span class="currency-icon thumbnail">
                                    <span class="bg-warning">
                                        <i class="fa fa-btc"></i>
                                    </span>
                                </span>
                            </div>
                            <div class="inputs">
                                @foreach (var input in Model.Transaction.Inputs.Where(input => input.AssetId == null))
                                {
                                    <div class="address-item ">
                                        <div class="amount">
                                            - @BitcoinUtils.SatoshiToBtc(input.Value)
                                        </div>
                                        <div class="address">
                                            <i class="fa fa-lg fa-arrow-left displ-fa"></i>
                                            @input.Address
                                        </div>
                                    </div>
                                }
                            </div>

                            <div class="outputs">
                                <div class="outputs-container">
                                    <div class="center-chevron">
                                        <img src="~/images/arrow.png"/>
                                    </div>

                                    @foreach (var output in Model.Transaction.Outputs.Where(output => output.Address != null && output.AssetId == null))
                                    {
                                        <div class="address-item ">
                                            <div class="amount">
                                                @BitcoinUtils.SatoshiToBtc(output.Value)
                                            </div>
                                            <div class="address">
                                                @output.Address
                                            </div>
                                        </div>
                                    }
                                    <div class="address-item div-fees">
                                        <div class="amount">
                                            @BitcoinUtils.SatoshiToBtc(Model.Transaction.Fees)
                                        </div>
                                        <div class="address">
                                            Fees
                                        </div>
                                    </div>
                                </div>
                            </div>
                        </div>

                    </li>
                    @if (Model.Transaction.AssetData.Any())
                    {
                        foreach (var assetDataItm in Model.Transaction.AssetData)
                        {
                            <li class="list-group-item clearfix intput-output-group-list-item assetBlock">
                                <div class="assetid">@assetDataItm.AssetId</div>
                                <div class="intput-output-group">
                                    <div class="icon dspl-icon">
                                        <span class="currency-icon thumbnail">
                                            <span class="bg-warning">
                                                <i class="fa fa-btc"></i>
                                            </span>
                                        </span>
                                    </div>
                                    <div class="inputs">
                                        @foreach (var input in Model.Transaction.Inputs.Where(input => input.AssetId == assetDataItm.AssetId))
                                        {
                                            <div class="address-item ">
                                                <div class="amount">
                                                    - @BitcoinUtils.SatoshiToBtc(input.Value)
                                                </div>
                                                <div class="address">
                                                    <i class="fa fa-lg fa-arrow-left displ-fa"></i>
                                                    @input.Address
                                                </div>
                                            </div>
                                        }
                                    </div>

                                    <div class="outputs">
                                        <div class="outputs-container">
                                            <div class="center-chevron">
                                                <img src="~/images/arrow.png" />
                                            </div>

                                            @foreach (var output in Model.Transaction.Outputs.Where(output => output.Address != null && output.AssetId == assetDataItm.AssetId))
                                            {
                                                <div class="address-item ">
                                                    <div class="amount">
                                                        @BitcoinUtils.SatoshiToBtc(output.Value)
                                                    </div>
                                                    <div class="address">
                                                        @output.Address
                                                    </div>
                                                </div>
                                            }
                                        </div>
                                    </div>
                                </div>

                            </li>
                        }

                    }


                </ul>

            </div>

        </div>

    </div>
    <div class="footer-push"></div>
</div>